--------------------------------------------------------------------------

#outside:inside for port and volume:

docker run --rm -itd -p 27017:27017 -v /c/Users/Dell/data:/appdata mongo:4.2.12

--------------------------------------------------------------------------

如果要正常退出不关闭容器，请按Ctrl+P+Q进行退出容器

--------------------------------------------------------------------------
mount 挂载：
-v /home/win/wincom-webapp/:/webapp表示将宿主机目录/home/win/wincom-webapp/挂在到容器中的/webapp目录上
$docker run -d -p 8888:8080 -v /c/Users/systemDir:/usr/local/log balance

docker run -it --name myDockerContainer1 --mount src=C:\myFolder,dst=c:\myDockerMount,type=bind aDockerImage:latest

docker run -it --name myDockerContainer1 --mount src="C:\myFolder\sub folder",dst=c:\myDockerMount,type=bind aDockerImage:latest

Here is a capture of the different folder path formats I’ve encountered
	//c/myFolder
	/c/myFolder
	c:\myFolder

--------------------------------------------------------------------------
docker 每次重新通过image run 一个container的话，之前的container的改动是不会带到新启动的container的。
但是之前的container的修改，如果docker stop 这个conainer然后又docker start这个container的话，container
里面的修改是有效的，还在的。

保存运行中的docker container提交为images:
1、docker ps 查看正在运行的容器.
2、docker exec –it  3bd0eef03413 bash  进入正在运行的容器内做修改，修改完成之后，exit 退出容器
3、docker commit 3bd0eef03413  demo：v1.3  提交你刚才修改的镜像，新的镜像名称为demo，版本为v1.3

---------------------------------------------
dockerbuildpush.bat

call mvn clean package
if not "%ERRORLEVEL%" == "0" goto goterror
REM call docker login xxxurl -username user -password ${YOUR_PASS}
call docker build -t spring-initiallizer-demo:v1 .
if not "%ERRORLEVEL%" == "0" goto goterror
REM call docker push xxxurl/com/example/springinitiallizerdemo/spring-initiallizer-demo:v1

echo 'docker run -p 80:8080 -itd -e spring.profiles.active=dev spring-initiallizer-demo:v1'
echo '$ sudo docker exec -it CONTAINERID /bin/bash'
echo '$ sudo docker exec -it CONTAINERID /bin/sh'
echo '$ sudo docker attach CONTAINERID'
echo '$ sudo docker run -itd spring-initiallizer-demo:v1 /bin/bash'

:goterror
if not "%ERRORLEVEL%" == "0" echo 'error occurred!'


Dockerfile：

FROM nexus.aaa.com:18089/p/y/base/java8:base
COPY target/mydemo-0.0.1-SNAPSHOT.jar /tmp/mydemo.jar
ADD credentials.json /tmp/credentials.json

WORKDIR /tmp
ENV MY_APP_CREDENTIALS=/tmp/credentials.json
ENTRYPOINT ["java", "-jar", "mydemo.jar"]

---------------------------------------------
https://docs.docker.com/engine/reference


Check docker status:
$ docker stats


search image:
$ docker search rabbitmq:management


pull image:
$ docker pull rabbitmq:management


Build an image from current folder dockerfile:
$ docker build --no-cache -t hiromuhota/webspoon:latest .


run image:
$ docker run -p 80:8080 -it -e myenvvariable=local123 image123:v1 
$ docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management


Show both running and stopped containers：
$ docker ps -a


Show disk usage by container：
$ docker ps -s


Container Filtering:
$ docker ps --filter "label=color"
$ docker ps --filter "name=nostalgic"
$ docker ps -a --filter 'exited=137'
$ docker ps --filter status=paused


Stop one or more running containers:
$ docker stop my_container


Start one or more stopped containers:
$ docker start my_container


Remove one or more containers:
$ docker rm /redis


Force-remove a running container:
$ docker rm --force redis


Remove all stopped containers:
$ docker rm $(docker ps -a -q)

Remove a container and its volumes:
$ docker rm -v redis


Remove all stopped containers：
$ docker container prune


Remove one or more images:
$ docker rmi fd484f19954f
$ docker rmi test:latest

$ docker rmi -f $(docker images) #delete all images
$ docker rm -f $(docker ps -a -q) #delete all containers


--------------------------------------------------------------------------
在使用docker的时候，在某些未知的情况下可能启动了容器，但是过了没几秒容器自动退出了。这个时候如何排查问题呢？

通常碰到这种情况无非就是环境有问题或者应用有问题，应用问题再本地可以进行调试解决，但是环境问题就比较头疼了。这个时候我们就需要查看容器的日志来进行排查。

我们可以通过如下命令来获取容器的日志地址

docker inspect --format '{{.LogPath}}' 97069f94437b
然后通过cat命令查看上述命令找到的日志地址

cat /var/lib/docker/containers/97069f94437b86b50341f8253d85f426884315c3d027f7b7fa975751c7d8e18e/97069f94437b86b50341f8253d85f426884315c3d027f7b7fa975751c7d8e18e-json.log

发现有更简单的命令
docker logs 97069f94437b

docker logs -t mysql
docker logs -f -t --tail 20 zylmysql
