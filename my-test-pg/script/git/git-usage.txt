========================================================================================================================================================
Git origin upstream practice:
1, (Fetch origin)：Local master <-- Origin master(Personal Repo) <-- Upstream master(Team Repo)
2, (Merge/Rebase): Upstream master --> Local master
3, (New branch): feature branch
4, Coding...
5, (Commit & Publish)to The-new-branch
6, (Push origin)
7, (PR) Pull request from origin The-new-branch to Upstream master
8, (If Conflicts) if conflicts then 
	8.1) (Fetch orign)
	8.2) (Merge) Upstream master --> The-new-branch
	8.3) Git --> merge --> solve conflicts...
	8.4) (Commit & Push)
9, Merge PR
10, Next round begins from Step1.


========================================================================================================================================================
Git trunk based source code managemenet:
All developers work on master branch, when release needed create a release branch e.g. release1.0.x, after release place a tag, e.g. release1.0.0
When hotfixing if this hotfix should be fixed in master as well, then fix the code in master and then cherry pick to release1.0.x
If the production issue does not exist in master then only fix in release1.0.x branch, after release, place a tag, e.g. release1.0.1

 
1, git checkout -b release1.0.x
2, git push 


###Daily checkout============================================================================
#checkout master and merge master into dev to working on development:

git checkout master 
git pull 
git checkout dev
git merge master 
git push -u origin dev

###Checkout 创建本地分支：
git checkout -b <branch> --track <remote>/<branch>
git checkout -b dev-yp --track origin/dev-yp
git checkout -b <branch-name> # Create a new branch and check it out
git checkout -b dev-yp-revert def866d
git push --set-upstream origin dev-yp-revert

###The remote branch is automatically created when you push it to the remote server. So when you feel ready for it, you can just do:
git push <remote-name> <branch-name> 
git push <remote-name> <local-branch-name>:<remote-branch-name>

<remote-name> is typically origin.
Check by: git remote -v


###将当前分支关联到远程的 release1.2.2-yp 分支:
git branch --set-upstream-to=origin/release1.2.2-yp
git checkout --track origin/release1.2.2

###那么如何查看已经配置分支关联信息呢，通过下述三条命令均可：
1. git branch -vv
2. git remote show origin
3. cat .git/config

###Delete branch:
// delete branch locally
git branch -d localBranchName
// delete branch remotely
git push origin --delete remoteBranchName


###查看分支都是谁创建的：
git for-each-ref --format='%(committerdate) %09 %(authorname) %09 %(refname)' | sort -k5n -k2M -k3n -k4n


###Remove .orig files: 
git clean -fd

###Reset to head:
git撤销已经commit但是未push的commit.
git reset --hard

1. git log
2. git reset id （不对代码修改进行撤销）
3. git reset –hard id (不建议使用，代码恢复到前一commit_id 对应的版本)


###how-to-fix-committing-to-the-wrong-git-branch：

If you haven't yet pushed your changes, you can also do a soft reset:
git reset --soft HEAD^

This will revert the commit, but put the committed changes back into your index. 
Assuming the branches are relatively up-to-date with regard to each other, git 
will let you do a checkout into the other branch, whereupon you can simply commit:

git checkout branch
git commit


$ git commit -m "Something terribly misguided"             # (1)
$ git reset HEAD~                                          # (2)
<< edit files as necessary >>                              # (3)
$ git add ...                                              # (4)
$ git commit -c ORIG_HEAD                                  # (5)


###git branch practice============================================================================
Refer to: git-usage-flow-sample-git-model2-with-description.PNG
---------------------------------------------------------------------------------------------------

###Git checkout tags:
---Method_1:---
$git clone
List tags $git tag -l
$git checkout tags/<tag_name>
or
$ git checkout tags/<tag_name> -b <branch_name>

---Method_2:---
git clone --branch my_abc http://git.abc.net/git/abc.git


Tag VS Branch
Tags are mainly used for future reference to the specific version of the project, by tagging a commit. You can always use branches of course, but if you change versions a lot, you will end up with lots of unused or rarely used branches.
Practically, tags are branches without branches anyway, just adding a way to reference a specific version of the project to reduce complexity.
----------------------------------------------------
Daily update code:
git pull (git pull #only pull current branch's new updates)
git checkout yp
git merge dev

----------------------------------------------------
Daily commit code & PR:
git add .
git commit -m '[xxx] xxx'
git push

github: PR yp --> dev

###git rebase:

git:(feature1) git rebase master

首先，git 会把 feature1 分支里面的每个 commit 取消掉；
其次，把上面的操作临时保存成 patch 文件，存在 .git/rebase 目录下；
然后，把 feature1 分支更新到最新的 master 分支；
最后，把上面保存的 patch 文件应用到 feature1 分支上；

###git mergetool============================================================================

Download & Install Kdiff3 tool: https://sourceforge.net/projects/kdiff3/
https://sourceforge.net/projects/kdiff3/files/kdiff3/ 
Download kdiff3-0.9.98-MacOSX-64Bit.dmg (10.3 MB)

$ git config --global  merge.tool kdiff3
$ git config mergetool.kdiff3.path "/usr/bin/kdiff3"
$ git config --global  mergetool.kdiff3.path  "/Applications/kdiff3.app/Contents/MacOS/kdiff3"

windows:
方法一：
I've been looking for the silver bullet solution to using KDiff3 as my git mergetool on Windows (using Git GUI).  I've finally got a solution that works in every Windows environment I've tried:

Add the KDiff3 directory to your Windows System Path (e.g. C:\Program Files\KDiff3\)
Add kdiff3 as your Git mergetool (From Git Bash, run git config --global merge.tool kdiff3)
Add kdiff3 complete path to Git Config (From Git Bash, run git config --global meregtool.kdiff3.path "C:/Program Files/KDiff3/kdiff3.exe")
Go into Git GUI settings and set the mergetool to kdiff3 (if Git GUI doesn't pick up this setting from git config, which it should)
Regardless of what I tried and/or read online, setting all possible settings is the only way KDiff3 works every time I select "Run Merge Tool" from the Git GUI right-click menu when there is a merge conflict.

-----
git config --global --add merge.tool kdiff3
git config --global --add mergetool.kdiff3.path "C:/Program Files/KDiff3/kdiff3.exe"
git config --global --add mergetool.kdiff3.trustExitCode false

git config --global --add diff.guitool kdiff3
git config --global --add difftool.kdiff3.path "C:/Program Files/KDiff3/kdiff3.exe"
git config --global --add difftool.kdiff3.trustExitCode false

查看git配置文件.gitconfig添加内容为：
[merge]
    tool = kdiff3
[mergetool "kdiff3"]
    path = C:/Program Files/KDiff3/kdiff3.exe
    trustExitCode = false
[diff]
    guitool = kdiff3
[difftool "kdiff3"]
    path = C:/Program Files/KDiff3/kdiff3.exe
    trustExitCode = false


---------------------------------------------
Conflict Merge code:
git pull
git checkout yp
git merge dev

##git mergetool

##You will see a vimdiff display in following format

  ╔═══════╦══════╦════════╗
  ║       ║      ║        ║
  ║ LOCAL ║ BASE ║ REMOTE ║
  ║       ║      ║        ║
  ╠═══════╩══════╩════════╣
  ║                       ║
  ║        MERGED         ║
  ║                       ║
  ╚═══════════════════════╝
These 4 views are:
LOCAL – this is file from the current branch
BASE – common ancestor, how file looked before both changes
REMOTE – file you are merging into your branch
MERGED – merge result, this is what gets saved in the repo
Ctrl+W Navigate to different windows.
Get change from windows:
:diffg RE
:diffg LO
:diffg BA

##Save, Exit, Commit and Clean up
:wqa save and exit from vi
#################################
git commit -m "message"
git clean Remove extra files (e.g. *.orig) created by diff tool.

--Windows version:
MODIFY file, and Save & Exit
git clean -fd
--

git push


2: Use Intellij IDE to solve conflict:-------
Press: Alt+9
Click Merge Conflicts "Resolve"
After solve the conflicts: run: git commit -m 'Solve conflicts ...', then the "|MERGING" will disappear。
And then run: git push

-----------------------
# keep remote files
git merge --strategy-option theirs
# keep local files
git merge --strategy-option ours


###git login set key============================================================================
ssh-keygen -t rsa -C "yunpeng.song@aaa.com"

---------
To get the SHA of the last commit from a specific branch, use git rev-parse
git rev-parse origin/master (remote branch)
or
git rev-parse master (local branch)

 A simple command-line tutorial:

Git global settings:

git config --global user.name "yp"
git config --global user.email "yysyp@foxmail.com"

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.


Create git repository:

mkdir easyplay-sqe
cd easyplay-sqe
git init
touch README.md
git add README.md
git commit -m "first commit"
git remote add origin https://gitee.com/yysyp/easyplay-sqe.git
git push -u origin master

Existing project?

cd existing_git_repo
git remote add origin https://gitee.com/yysyp/easyplay-sqe.git
git push -u origin master



###git tag ============================================================================

1> 利用git log命令查看要特定commit的hash值
	$ git log --pretty=oneline --abbrev-commit

2> 使用 git tag命令打tag
	
	没有tag信息说明方式：
	git tag v1.0
	
    含有tag信息说明方式：
	$ git tag -a tagName -m "my tag"

3> 提交tag到远程：
	git push --tags

###============================================================================
.gitignore not use for already commited file.

# Windows:
Thumbs.db
ehthumbs.db
Desktop.ini

#Directories
APP1/
a             # 忽略所有 .a 结尾的文件
!lib.a        # 但lib.a 除外
/TODO         # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
build/        # 忽略build/ 目录下的所有文件
doc/.txt      # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt

#git-to-ignore-folder-or-file-remove-from-gittemparea-still-in-local:
git rm --cached logs/* -r
git rm -f --cached logs/xx.log

git add .
git commit -m "Update .gitignore"
git push


#To undo git add use:
#Revert git add
git reset <file> 


#git-to-force-to-add-ignored-file:
git add -f filename

#git-to-check-ignore-rule:
git check-ignore


###============================================================================
git commit -m rules:
1, comments format: <type>(<scope>): <subject>
type could be:
	feature:
	fix:
	docs:
	style:
	refactor:
	performance: performance tunning
	test: 
	revert:
	merge:
	sync:
	to:


###============================================================================

忽略的语法规则：
(#)表示注释
(*)  表示任意多个字符; 
(?) 代表一个字符;
 ([abc]) 代表可选字符范围
如果名称最前面是路径分隔符 (/) ，表示忽略的该文件在此目录下。
如果名称的最后面是 (/) ，表示忽略整个目录，但同名文件不忽略。
通过在名称前面加 (!) ，代表不忽略。

例子如下：
# 这行是注释
*.a                   # 忽略所有 .a 伟扩展名的文件
!lib.a                # 但是 lib.a 不忽略，即时之前设置了忽略所有的 .a
/TODO            # 只忽略此目录下 TODO 文件，子目录的 TODO 不忽略 
build/               # 忽略所有的 build/ 目录下文件
doc/*.txt           # 忽略如 doc/notes.txt, 但是不忽略如 doc/server/arch.txt

-----------------------------------------------------------
# 忽略dbg文件和dbg目录
dbg

# 只忽略dbg目录，不忽略dbg文件
dbg/

# 只忽略dbg文件，不忽略dbg目录
dbg
!dbg/

# 只忽略当前目录下的dbg文件和目录，子目录的dbg不在忽略范围内
/dbg

========================================================================================================================================================